apply plugin: 'com.android.application'

android {
    compileSdkVersion 23
    buildToolsVersion "24.0.0 rc2"

    def version_code = getVersionCode();
    def version_name = getVersionName();

    defaultConfig {
        applicationId "qulei.android.gradle"
        minSdkVersion 15
        targetSdkVersion 23
        versionCode version_code
        versionName version_name.toString()
    }

    signingConfigs {    //配置签名文件
        config  //自设定安全 keystore

        original {  //官方设定 keystore (参照)
            storeFile file("../test_keystore.jks")
            storePassword "123456"
            keyAlias "android-gradle"
            keyPassword "654321"
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
            //signingConfig signingConfigs.original
        }
    }
}

assembleRelease {}.doLast {
    updateVersionCode()
    updateVersionName()
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:23.3.0'
}

//读取配置信息及设定签名文件信息
def keystore = rootProject.file('keystore.properties')
if (keystore.canRead()) {
    def props = new Properties();
    props.load(new FileInputStream(keystore))

    if (props != null) {
        android.signingConfigs.config.storeFile file(props['store_file'])
        android.signingConfigs.config.storePassword props['store_password']
        android.signingConfigs.config.keyAlias props['key_alias']
        android.signingConfigs.config.keyPassword props['key_password']
    } else {
        println 'some parameters in \'keystore.properties\' not found!'
    }
} else {
    println '\'keystore.properties\' not found!'
}

// 自增长版本号管理-获取版本号
def getVersionCode() {
    def version = rootProject.file('version.properties')
    if (version.canRead()) {
        def props = new Properties()
        props.load(new FileInputStream(version))
        def versionCode = props['build.number'].toInteger()
        return versionCode
    } else {
        throw new GradleException("Could not find version.properties!")
    }
}

// 自增长版本号管理-更新版本号
def updateVersionCode() {
    def version = rootProject.file('version.properties')
    if (version.canWrite()) {
        def properties = new Properties()
        properties.load(new FileInputStream(version))
        def versionCode = properties['build.number'].toInteger()
        properties['build.number'] = (versionCode + 1).toString()
        properties.store(version.newWriter(), null)
        println('Updated version code to ' + versionCode.toString())
    } else {
        throw new GradleException("Could not find version.properties!")
    }
}

def getVersionName() {
    def version = rootProject.file('version.properties')
    if (version.canRead()) {
        def props = new Properties()
        props.load(new FileInputStream(version))
        def major = props['version_major'].toString();
        def minor = props['version_minor'].toString();
        def patch = props['version_patch'].toString();
        def versionName = 'v' + major + '.' + minor + '.' + patch
        return versionName
    } else {
        throw new GradleException("Could not find version.properties!")
    }
}

// major，minor根据业务自行手动修改或自行增加增量规则
def updateVersionName() {
    def version = rootProject.file('version.properties')
    if (version.canWrite()) {
        def properties = new Properties()
        properties.load(new FileInputStream(version))
        def versionPatch = properties['version_patch'].toInteger()
        properties['version_patch'] = (versionPatch + 1).toString()
        properties.store(version.newWriter(), null)
    } else {
        throw new GradleException("Could not find version.properties!")
    }
}

// 时间戳
def releaseTime() {
    return new Date().format("yyyyMMddHHmmss", TimeZone.getTimeZone("UTC"))
}



